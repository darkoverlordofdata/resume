// Generated by CoffeeScript 1.6.3
(function() {
  var fs, path, templates, yaml,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  yaml = require('yaml-js');

  templates = require('./templates');

  module.exports = {
    run: function() {
      var $args, $branch, $config, $config_dev, $dest, $dir, $file, $has_dest, $option, $path, $project, $readme, $use_branch, _i, _j, _len, _len1, _ref, _ref1, _results;
      $project = arguments[0], $args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      $path = path.resolve(process.cwd(), $project);
      if (fs.existsSync($path)) {
        process.exit(console.log("ERR: the folder " + $path + " already exists."));
      }
      while (($option = $args.shift()) != null) {
        switch ($option) {
          case '-b':
          case '--branch':
            $use_branch = true;
            $branch = $args.shift();
            break;
          case '-d':
          case '--dest':
            $has_dest = true;
            $dest = $args.shift();
            break;
          default:
            throw "ERR: Invalid option " + $option;
        }
      }
      console.log("Creating " + $project + "...");
      $readme = "# \"" + $project + "\"";
      if ($has_dest) {
        if ($dest == null) {
          $dest = (function() {
            switch ($branch) {
              case "master":
                return "gh-pages";
              case "source":
                return "master";
              default:
                return "www";
            }
          })();
        }
      }
      if ($use_branch) {
        fs.mkdirSync($path);
        $path += '/' + $branch;
        $config = "name: \"" + $project + "\"\ndescription: \"On, Hekyll! On, Jekyll! On Huginn and Muninn!\"\n\nsource: ./template\ndestination: ./" + $dest + "\n\nport: 0xd16a\nurl: http://" + $project + ".com\n\nplugins:\n  - huginn-asset-bundler\n\nasset_bundler:\n  compress:\n    js: true\n    css: true\n  base_path: /assets/\n  shim: /" + $project + "\n  dev: false\n  markup_templates:\n    js: \"<script type='text/javascript' src='{{url}}'></script>\n\"\n    css: \"<link rel='stylesheet' type='text/css' href='{{url}}' />\n\"\n";
        $config_dev = "name: \"" + $project + "\"\ndescription: \"On, Hekyll! On, Jekyll! On Huginn and Muninn!\"\n\nsource: ./template\ndestination: ./" + $dest + "/" + $project + "\n\nport: 0xd16a\nurl: http://" + $project + ".com\n\nserve:\n  - ./" + $dest + "\n  - ../../user_org.github.io/master\n\nplugins:\n  - huginn-asset-bundler\n\nasset_bundler:\n  compress:\n    js: false\n    css: false\n  base_path: /assets/\n  shim: /" + $project + "\n  dev: true\n  markup_templates:\n    js: \"<script type='text/javascript' src='{{url}}'></script>\n\"\n    css: \"<link rel='stylesheet' type='text/css' href='{{url}}' />\n\"\n";
      } else {
        $config = "name: \"" + $project + "\"\ndescription: \"On, Hekyll! On, Jekyll! On Huginn and Muninn!\"\n\nsource: ./template\ndestination: ./" + $dest + "\n\nport: 0xd16a\nurl: http://" + $project + ".com\n\nplugins:\n  - huginn-asset-bundler\n\nasset_bundler:\n  compress:\n    js: true\n    css: true\n  base_path: /assets/\n  shim: /" + $project + "\n  dev: false\n  markup_templates:\n    js: \"<script type='text/javascript' src='{{url}}'></script>\n\"\n    css: \"<link rel='stylesheet' type='text/css' href='{{url}}' />\n\"\n";
        $config_dev = "name: \"" + $project + "\"\ndescription: \"On, Hekyll! On, Jekyll! On Huginn and Muninn!\"\n\nsource: ./template\ndestination: ./" + $dest + "\n\nport: 0xd16a\nurl: http://" + $project + ".com\n\nserve:\n  - ./" + $dest + "\n\nplugins:\n  - huginn-asset-bundler\n\nasset_bundler:\n  compress:\n    js: false\n    css: false\n  base_path: /assets/\n  shim: /" + $project + "\n  dev: true\n  markup_templates:\n    js: \"<script type='text/javascript' src='{{url}}'></script>\n\"\n    css: \"<link rel='stylesheet' type='text/css' href='{{url}}' />\n\"\n";
      }
      _ref = ["" + $path, "" + $path + "/template", "" + $path + "/template/_assets", "" + $path + "/template/_data", "" + $path + "/template/_drafts", "" + $path + "/template/_includes", "" + $path + "/template/_layouts", "" + $path + "/template/_plugins", "" + $path + "/template/_posts"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $dir = _ref[_i];
        fs.mkdirSync($dir);
      }
      _ref1 = [
        {
          path: "" + $path + "/.gitignore",
          content: '.gitignore'
        }, {
          path: "" + $path + "/readme.md",
          content: $readme
        }, {
          path: "" + $path + "/config.yml",
          content: $config
        }, {
          path: "" + $path + "/config-dev.yml",
          content: $config_dev
        }, {
          path: "" + $path + "/template/CNAME",
          content: "" + $project + ".com"
        }, {
          path: "" + $path + "/template/404.html",
          content: '404'
        }, {
          path: "" + $path + "/template/index.html",
          content: 'index'
        }, {
          path: "" + $path + "/template/_layouts/default.html",
          content: 'layouts_default'
        }, {
          path: "" + $path + "/template/_layouts/post.html",
          content: 'layouts_post'
        }, {
          path: "" + $path + "/template/_includes/header.html",
          content: 'includes_header'
        }, {
          path: "" + $path + "/template/_includes/footer.html",
          content: 'includes_footer'
        }, {
          path: "" + $path + "/template/_posts/2013-01-01-hello.html",
          content: 'posts_hello'
        }
      ];
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        $file = _ref1[_j];
        if (templates[$file.content] != null) {
          _results.push(fs.writeFileSync($file.path, templates[$file.content]()));
        } else {
          _results.push(fs.writeFileSync($file.path, $file.content));
        }
      }
      return _results;
    }
  };

}).call(this);
